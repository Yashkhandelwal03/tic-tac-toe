{"version":3,"sources":["Components/Icons.js","App.js","reportWebVitals.js","index.js"],"names":["Icon","name","className","itemArray","Array","fill","App","useState","isCross","setIsCross","winMessage","setWinMessage","changeItem","itemNumber","toast","type","Container","position","Row","Col","md","Button","color","block","onClick","map","item","index","Card","CardBody","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fa1795a8.chunk.js","sourcesContent":["import React from 'react';\r\nimport {FaTimes,FaPen,FaRegCircle} from 'react-icons/fa';\r\nfunction Icon({name}){\r\n   switch (name){\r\n       case 'circle':\r\n           return <FaRegCircle className=\"icon\" />\r\n       case 'cross':\r\n           return <FaTimes className=\"icon\" />\r\n       default:\r\n           return <FaPen className=\"icon\" />\r\n   }\r\n} \r\nexport default Icon;","// import React,{useState} from 'react';\r\n// import './App.css';\r\n\r\n// function App(){\r\n//     const [count,setcount] = useState(0);\r\n//     return(\r\n//       <div className=\"App\">\r\n//         <header>\r\n//           <h1>Lets Create Counter App using State</h1>\r\n//         </header>\r\n//         <h2>The current value of Counter is{count}</h2>\r\n//         <button onClick={() =>setcount(0)}>Reset Counter</button>\r\n//         <button onClick={() =>count > 9 ? null :setcount(count +1)}>Increase Counter</button>\r\n//         <button onClick={() =>count < 1 ? null :setcount(count -1)}>Decrease Counter</button>\r\n//       </div>\r\n//     )   \r\n// }\r\n\r\n// export default App\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import React,{useState} from 'react';\r\n// import './App.css';\r\n// import Icon from './Components/Icons'\r\n\r\n// import { ToastContainer, toast } from 'react-toastify';\r\n// import 'react-toastify/dist/ReactToastify.css';\r\n\r\n// import { Card,CardBody,Container,Button,Col,Row } from 'reactstrap';\r\n// import 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\n// const itemArray = new Array(9).fill('empty');\r\n\r\n// function App(){\r\n//     const [isCross,setIsCross] = useState(false);\r\n//     const [winMessage,setWinMessage] = useState(\"\");\r\n//     const reloadGame = () =>{\r\n//       //\r\n//     }\r\n//     const checkIsWinner = () =>{\r\n//       //\r\n//     }\r\n//     const changeItem = itemNumber =>{\r\n//       //\r\n//     }\r\n//     return(\r\n//         <Container className=\"p-5\">\r\n//           <ToastContainer position=\"bottom-center\">\r\n//             <Row>\r\n//               <col md={6} className=\"offset md-3\">\r\n//                 <div className=\"grid\">\r\n//                   {itemArray.map((item,index) =>(\r\n//                     <card>\r\n//                       <CardBody className=\"box\">\r\n//                         <Icon name={item}/>\r\n//                       </CardBody>\r\n//                     </card>\r\n//                     ))\r\n//                   }\r\n//                 </div>\r\n//               </col>\r\n//             </Row>\r\n//           </ToastContainer>\r\n//         </Container>\r\n//     )\r\n// }\r\n// export default App\r\n\r\nimport React, { useState } from \"react\";\r\n\r\n\r\nimport Icon from \"./Components/Icons\";\r\n\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\nimport { Card, CardBody, Container, Button, Col, Row } from \"reactstrap\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport \"./App.css\";\r\n\r\nconst itemArray = new Array(9).fill(\"empty\");\r\n\r\nconst App = () => {\r\n  const [isCross, setIsCross] = useState(false);\r\n  const [winMessage, setWinMessage] = useState(\"\");\r\n\r\n  const reloadGame = () => {\r\n    setIsCross(false)\r\n    setWinMessage(\"\")\r\n    itemArray.fill(\"empty\",0,9)\r\n  };\r\n\r\n  const checkIsWinner = () => {\r\n   \r\n    if (\r\n      itemArray[0] === itemArray[1] &&\r\n      itemArray[0] === itemArray[2] &&\r\n      itemArray[0] !== \"empty\"\r\n    ) {\r\n      setWinMessage(`${itemArray[0]} won`);\r\n    } else if (\r\n      itemArray[3] !== \"empty\" &&\r\n      itemArray[3] === itemArray[4] &&\r\n      itemArray[4] === itemArray[5]\r\n    ) {\r\n      setWinMessage(`${itemArray[3]} won`);\r\n    } else if (\r\n      itemArray[6] !== \"empty\" &&\r\n      itemArray[6] === itemArray[7] &&\r\n      itemArray[7] === itemArray[8]\r\n    ) {\r\n      setWinMessage(`${itemArray[6]} won`);\r\n    } else if (\r\n      itemArray[0] !== \"empty\" &&\r\n      itemArray[0] === itemArray[3] &&\r\n      itemArray[3] === itemArray[6]\r\n    ) {\r\n      setWinMessage(`${itemArray[0]} won`);\r\n    } else if (\r\n      itemArray[1] !== \"empty\" &&\r\n      itemArray[1] === itemArray[4] &&\r\n      itemArray[4] === itemArray[7]\r\n    ) {\r\n      setWinMessage(`${itemArray[1]} won`);\r\n    } else if (\r\n      itemArray[2] !== \"empty\" &&\r\n      itemArray[2] === itemArray[5] &&\r\n      itemArray[5] === itemArray[8]\r\n    ) {\r\n      setWinMessage(`${itemArray[2]} won`);\r\n    } else if (\r\n      itemArray[0] !== \"empty\" &&\r\n      itemArray[0] === itemArray[4] &&\r\n      itemArray[4] === itemArray[8]\r\n    ) {\r\n      setWinMessage(`${itemArray[0]} won`);\r\n    } else if (\r\n      itemArray[2] !== \"empty\" &&\r\n      itemArray[2] === itemArray[4] &&\r\n      itemArray[4] === itemArray[6]\r\n    ) {\r\n      setWinMessage(`${itemArray[2]} won`);\r\n    }\r\n};\r\n\r\n\r\n  const changeItem = itemNumber => {\r\n    if (winMessage){\r\n      return toast(winMessage,{type:\"Success\"})\r\n    }\r\n\r\n    if(itemArray[itemNumber]===\"empty\"){\r\n      itemArray[itemNumber] = isCross ? \"cross\":\"circle\";\r\n      setIsCross(!isCross);\r\n    }else{\r\n      return toast(\"already filled\",{type:\"error\"});\r\n    }\r\n\r\n    checkIsWinner();\r\n  };\r\n\r\n  return (\r\n    <Container className=\"p-5\">\r\n      <ToastContainer position=\"bottom-center\" />\r\n      <Row>\r\n        <Col md={6} className=\"offset-md-3\">\r\n          {winMessage ? (\r\n            <div className=\"mb-2 mt-2\">\r\n              <h1 className=\"text-success text-uppercase text-center\">\r\n                {winMessage}\r\n              </h1>\r\n              <Button color=\"success\" block onClick={reloadGame}>\r\n                Reload the game\r\n              </Button>\r\n            </div>\r\n          ) : (\r\n            <h1 className=\"text-center text-warning\">\r\n              {isCross ? \"Cross\" : \"Circle\"} turns\r\n            </h1>\r\n          )}\r\n          <div className=\"grid\">\r\n            {itemArray.map((item, index) => (\r\n              <Card color=\"warning\" onClick={() =>changeItem(index)} >\r\n                <CardBody className=\"box\">\r\n                  <Icon name={item} />\r\n                </CardBody>\r\n              </Card>\r\n            ))}\r\n          </div>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n};\r\n\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}